(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{75:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),c=(a(0),a(91)),i={id:"rendering",title:"Rendering charts",sidebar_label:"Rendering charts",slug:"/rendering"},o={unversionedId:"rendering",id:"rendering",isDocsHomePage:!1,title:"Rendering charts",description:"The following is a simple example of rendering a chart with rawgraphs-core:",source:"@site/docs/rendering.md",slug:"/rendering",permalink:"/docs/rendering",editUrl:"https://github.com/rawgraphs/rawgraphs-core/edit/master/website/docs/rendering.md",version:"current",sidebar_label:"Rendering charts",sidebar:"docs",previous:{title:"Quick example (direct script inclusion)",permalink:"/docs/example-script"},next:{title:"Chart interface",permalink:"/docs/chart-interface"}},b=[{value:"1. Imports: chart factory function and chart implementation",id:"1-imports-chart-factory-function-and-chart-implementation",children:[]},{value:"2. Defining <code>data</code>",id:"2-defining-data",children:[]},{value:"3. Defining <code>mapping</code>",id:"3-defining-mapping",children:[]},{value:"4. Creating a chart instance (<code>viz</code>)",id:"4-creating-a-chart-instance-viz",children:[{value:"chart(visualModel, config) \u21d2 <code>Chart</code>",id:"chartvisualmodel-config-\u21d2-codechartcode",children:[]}]},{value:"5. Rendering to the DOM",id:"5-rendering-to-the-dom",children:[{value:"chart.renderToDOM(domNode) \u21d2 <code>DOMChart</code>",id:"chartrendertodomdomnode-\u21d2-codedomchartcode",children:[]}]}],l={toc:b};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The following is a simple example of rendering a chart with rawgraphs-core:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// 1. imports: chart factory function and chart implementation\nimport { chart } from '@rawgraphs/rawgraphs-core'\nimport { bubblechart } from '@rawgraphs/rawgraphs-charts'\n\n// 2. defining data\nconst data = [{age:10, height:130}, {age:18, height:170}]\n\n// 3. defining mapping\nconst mapping = { x: { value: 'age' }, y: { value: 'height' } }\n\n// 4. creating a chart instance\nconst viz = new chart(bubblechart {\xa0data, mapping})\n\n// 5. rendering to the DOM\nconst targetNode = document.getElementById('some-div')\nviz.renderToDOM(targetNode)\n")),Object(c.b)("p",null,"Let's analyze the imports, variables and methods call we introduced in this snippet."),Object(c.b)("h2",{id:"1-imports-chart-factory-function-and-chart-implementation"},"1. Imports: chart factory function and chart implementation"),Object(c.b)("p",null,"Here we're importing the ",Object(c.b)("inlineCode",{parentName:"p"},"chart")," function from 'rawgraphs-core' (this library).\nWe'll also need an actual ",Object(c.b)("strong",{parentName:"p"},"chart implementation")," and we'll using a ",Object(c.b)("inlineCode",{parentName:"p"},"bubblechart")," from ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/rawgraphs/rawgraphs-charts"}),"@rawgraphs/rawgraphs-charts"),",\nthe official charts package used in the RAWGraphs app."),Object(c.b)("h2",{id:"2-defining-data"},"2. Defining ",Object(c.b)("inlineCode",{parentName:"h2"},"data")),Object(c.b)("p",null,"The data that must be rendered. RAWGraphs expects tabular data as input, in particular a list of objects,\nthat should all have the same property names. Those property names (the ",Object(c.b)("strong",{parentName:"p"},"columns")," of the tabular dataset) will be\nused as in ",Object(c.b)("strong",{parentName:"p"},"mapping"),"."),Object(c.b)("p",null,"In our example we have a dataset with columns 'age' and 'height' (two numbers), and two data points."),Object(c.b)("h2",{id:"3-defining-mapping"},"3. Defining ",Object(c.b)("inlineCode",{parentName:"h2"},"mapping")),Object(c.b)("p",null,"The ",Object(c.b)("strong",{parentName:"p"},"mapping"),' object is used to "map" the chart semantics to the columns of the dataset.\nIt should be an object where: '),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"keys represent ",Object(c.b)("strong",{parentName:"li"},"dimension")," of the chart we're going to render"),Object(c.b)("li",{parentName:"ul"},"values are objects with a ",Object(c.b)("strong",{parentName:"li"},"value")," property that should contain one or more columns of the dataset ")),Object(c.b)("h2",{id:"4-creating-a-chart-instance-viz"},"4. Creating a chart instance (",Object(c.b)("inlineCode",{parentName:"h2"},"viz"),")"),Object(c.b)("p",null,"In rawgraphs-core, high level operations, such as chart rendering, are implemented by the",Object(c.b)("inlineCode",{parentName:"p"},"Chart")," class."),Object(c.b)("p",null,"To get an instance of this class, we use the ",Object(c.b)("inlineCode",{parentName:"p"},"chart")," factory function from 'rawgraphs-core'. "),Object(c.b)("h3",{id:"chartvisualmodel-config-\u21d2-codechartcode"},"chart(visualModel, config) \u21d2 ",Object(c.b)("a",Object(n.a)({parentName:"h3"},{href:"#Chart"}),Object(c.b)("code",null,"Chart"))),Object(c.b)("p",null,"This is the entry point for creating a chart with raw. It will return an instance of the RAWChart class and takes two parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"chartImplementation"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"#ChartImplementation"}),Object(c.b)("code",null,"ChartImplementation")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"config"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"#RawConfig"}),Object(c.b)("code",null,"RawConfig")))))),Object(c.b)("p",null,"The first parameter, the ",Object(c.b)("inlineCode",{parentName:"p"},"chartImplementation")," is a chart object conforming the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/chart-interface"}),"chart interface"),"."),Object(c.b)("p",null,"The second parameter, the ",Object(c.b)("inlineCode",{parentName:"p"},"config")," object, has following properties:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"data"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("code",null,"Array.","<","Object",">")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"the tabular data to be represented")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dataTypes"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"#DataTypes"}),Object(c.b)("code",null,"DataTypes"))),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object with data types annotations (column name => type name)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mapping"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"#Mapping"}),Object(c.b)("code",null,"Mapping"))),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"the current mapping of column names to dimensions of the current visual model")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"[visualOptions]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"#VisualOptions"}),Object(c.b)("code",null,"VisualOptions"))),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("code",null,"{}")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"visual options values")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"[styles]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("code",null,"Object")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("code",null,"{}")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"css in js styles definitions")))),Object(c.b)("h2",{id:"5-rendering-to-the-dom"},"5. Rendering to the DOM"),Object(c.b)("p",null,"Once we have a chart instance, we're ready to render in to the DOM.\nFirst, we must get an instance of valid DOM node, in our case we're using the ",Object(c.b)("inlineCode",{parentName:"p"},"getElementById")," method of the current document. This node will be the container of our visualization."),Object(c.b)("p",null,"To render the chart, we call the ",Object(c.b)("inlineCode",{parentName:"p"},"renderToDOM")," method of our chart instance, which has the following signature"),Object(c.b)("h3",{id:"chartrendertodomdomnode-\u21d2-codedomchartcode"},"chart.renderToDOM(domNode) \u21d2 ",Object(c.b)("a",Object(n.a)({parentName:"h3"},{href:"/docs/api#domchart"}),Object(c.b)("code",null,"DOMChart"))),Object(c.b)("p",null,"this function call will draw the chart in your document and return an instance of the ",Object(c.b)("inlineCode",{parentName:"p"},"DOMChart")," class, which extends the ",Object(c.b)("inlineCode",{parentName:"p"},"Chart")," class and has an internal reference to the DOM node."),Object(c.b)("div",{className:"admonition admonition-info alert alert--info"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"At the moment rawgraphs-core has not support for ",Object(c.b)("strong",{parentName:"p"},"updating")," a chart once it's rendered. In the ",Object(c.b)("inlineCode",{parentName:"p"},"renderToDOM")," method, the target dom node inner html is always cleaned before proceeding to the actual chart rendering."))))}d.isMDXComponent=!0},91:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,i=e.parentName,l=b(e,["components","mdxType","originalType","parentName"]),p=d(a),h=n,m=p["".concat(i,".").concat(h)]||p[h]||s[h]||c;return a?r.a.createElement(m,o(o({ref:t},l),{},{components:a})):r.a.createElement(m,o({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,i=new Array(c);i[0]=h;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<c;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);